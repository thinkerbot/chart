#!/usr/bin/env ruby

begin
  require 'optparse'
  require 'chart'
  require 'irb'
  require 'shellwords'
  require 'csv'

  options = Chart.options(
    :mode => :console,
    :overrides => {},
  )
  OptionParser.new do |opts|
    opts.banner = %{
usage: chart-console [options]

  Gives you a console with the cql connection set up as normal.

    $ chart-console
    > conn.exec("select * from charts")
    ...

options:

}.lstrip

    opts.on("-H", "--hosts HOST[,HOST]", "override hosts config") do |value|
      options[:overrides][:hosts] = value.split(',')
    end

    opts.on("-e", "--environment ENV", "environment (#{options[:environment]})") do |value|
      options[:environment] = value
    end

    opts.on("-k", "--keyspace KEYSPACE", "override keyspace config") do |value|
      options[:overrides][:keyspace] = value == '-' ? nil : value
    end

    opts.on("-h", "--help", "print this help") do
      puts opts
      puts
      puts Chart.version
      exit
    end

    opts.on("-P", "--port PORT", "override port config") do |value|
      options[:overrides][:port] = value
    end

    opts.on("-p", "--print-cqlsh", "print cqlsh command") do
      options[:mode] = :print_cqlsh
    end

    opts.on("--print-config", "print client config") do
      options[:mode] = :print_config
    end

    opts.on("-q", "--cqlsh", "launch cqlsh with argv") do
      options[:mode] = :cqlsh
    end

    opts.on("-x", "--execute QUERY", "execute query") do |value|
      options[:mode] = value
    end

    opts.on("--version", "print version information") do |node|
      puts Chart.version
      exit
    end
  end.parse!
  Chart.setup(options)

  def conn
    Chart.conn
  end

  def config
    conn.config
  end

  mode = options[:mode]
  case mode
  when :console
    ARGV.clear
    IRB.start(__FILE__)

  when :print_config
    print_config = {}
    config.keys.map(&:to_s).sort.each do |key|
      print_config[key] = config[key.to_sym]
    end
    puts print_config.to_yaml

  when :cqlsh, :print_cqlsh
    # don't use port as it is... maybe a different protocol? needs to be 9160
    command = ["cqlsh", config[:hosts][0]]
    if keyspace = config[:keyspace]
      command += ["-k", keyspace]
    end
    command = command.map(&:to_s)
    command = Shellwords.shelljoin(command + ARGV)

    if mode == :print_cqlsh
      puts command
    else
      exec command
    end

  else
    Chart.setup(options)
    rows = conn.execute(mode)
    CSV($stdout) do |csv|
      rows.each do |row|
        csv << row.values
      end
    end
  end
end
