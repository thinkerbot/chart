#!/usr/bin/env ruby

begin
  require 'optparse'
  require 'chart'
  require 'irb'
  require 'shellwords'
  require 'csv'

  options = Chart.options(
    :mode => :console,
  )
  OptionParser.new do |opts|
    opts.banner = %{
usage: chart-console [options]

  Gives you a console with the chart context set up as normal.

    $ chart-console
    > storage.exec("select * from charts")
    ...

options:

}.lstrip

    opts.on("-c", "--config-file CONFIG_FILE", "config file (#{options[:config_file]})") do |value|
      options[:config_file] = value
    end

    opts.on("-h", "--help", "print this help") do
      puts opts
      puts
      puts Chart.version
      exit
    end

    opts.on("-o", "--option KEY=VALUE", "override config option") do |value|
      options[:settings] << value
    end

    opts.on("-p", "--print-cmd", "print storage shell command") do
      options[:mode] = :print_shell_command
    end

    opts.on("--print-config", "print client config") do
      options[:mode] = :print_config
    end

    opts.on("-q", "--shell", "launch storage shell with argv") do
      options[:mode] = :launch_shell
    end

    opts.on("-x", "--execute QUERY", "execute query") do |value|
      options[:mode] = value
    end

    opts.on("--version", "print version information") do |node|
      puts Chart.version
      exit
    end
  end.parse!
  Chart.setup(options)

  def storage
    Chart.driver.storage
  end

  mode = options[:mode]
  case mode
  when :console
    ARGV.clear
    at_exit { Chart.reset }
    IRB.start(__FILE__)

  when :print_config
    print_config = {}
    config.keys.map(&:to_s).sort.each do |key|
      print_config[key] = config[key.to_sym]
    end
    puts print_config.to_yaml

  when :launch_shell, :print_shell_command
    command, env = storage.command_env
    command = (command + ARGV)

    if mode == :print_shell_command
      puts command.shelljoin
    else
      exec env, *command
    end

  else
    rows = storage.execute(mode)
    CSV($stdout) do |csv|
      rows.each do |row|
        csv << row.values
      end
    end
  end
end
